package com.day1.session2.ex5;

import java.util.*;
import java.util.function.BinaryOperator;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.util.stream.Collectors.*;


public class CopyOfDemoBookCaseStudyProblem {

	public static void main(String[] args) {

		List<Book> allBooks = loadAllBooks();
		
		allBooks.forEach(b-> System.out.println(b));

		// 1. Find books with more then 400 pages
		System.out.println("------------------------------------");
		List<Book> allBooksWithMoreThen400Pages=
				allBooks
				.stream()
				.filter(b-> b.getPages()>400)
				.collect(toList());
		allBooksWithMoreThen400Pages.forEach(b-> System.out.println(b));
		
		// 2. Find all books that are java books and more then 400 pages
//		System.out.println("------------------------------------");
//		Predicate<Book>javaBookPredicate=b->b.getSubject()==Subject.JAVA;
//		Predicate<Book>bookMoreThen400PagesPredicate=b->b.getPages()>400;
//		
//		List<Book> allBooksWithMoreThen400PagesAndJavaBook=
//				allBooks
//				.stream()
//				.filter(bookMoreThen400PagesPredicate.and(javaBookPredicate))
//				.collect(toList());
//		allBooksWithMoreThen400Pages.forEach(b-> System.out.println(b));
		
		
		// 3. We need the top three longest books
	
		List<Book> top3LongestBook=
				allBooks
				.stream()
				.sorted(Comparator.comparing(Book::getPages).reversed())
				//.skip(1)
				.limit(3)
				.collect(toList());
		top3LongestBook.forEach(b-> System.out.println(b));
		
		// 4. We need from the fourth to the last longest books

		// 5. We need to get all the publishing years

		List<Integer> yearList=allBooks.stream()
				.map(b-> b.getYear())
				.distinct()
				.collect(toList());
		
		
		yearList.forEach(y-> System.out.println(y));
		// 6. We need all the authors names who have written a book		
		
		//we want to print all the authors
//		Stream<Stream<Author>> map = allBooks.stream()
//				.map(b->b.getAuthors().stream());
		
//		List<Author> authors= allBooks.stream()
//				.flatMap(b->b.getAuthors().stream())
//				.collect(toList());
	
		
		
		System.out.println("----------------------------------------------------");
//		List<String> authorNames= allBooks.stream()
//				.flatMap(b->b.getAuthors().stream())
//				.map(a->a.getName())
//				.distinct()
//				.collect(toList());
//		
//		System.out.println(authorNames);
//		
//		String authorNamesCombined= allBooks.stream()
//				.flatMap(b->b.getAuthors().stream())
//				.map(a->a.getName())
//				.distinct()
//				.collect(joining(","));
//		
//		System.out.println(authorNamesCombined);
		
		
		
		
		// We need all the origin countries of the authors

			String countryNamesCombined= allBooks.stream()
			.flatMap(b->b.getAuthors().stream())
			.map(a->a.getCountry())
			.distinct()
			.collect(joining(","));
	
	        System.out.println(countryNamesCombined);
		
		System.out.println("###############################");
		// We want the most recent published book.
	        Optional<Book> optBooks = allBooks.stream().max(Comparator.comparingInt(Book::getYear));
	
	        System.out.println(optBooks.map(b-> b.getTitle()).orElse("book is not there"));
	        
		// We want to know if all the books are written by more than one author
	        
//	        boolean isAllBooksWritenByMoreThenOneAuthor = allBooks.stream().allMatch(b->b.getAuthors().size()>1);
//	        
//	        System.out.println(isAllBooksWritenByMoreThenOneAuthor);
	        
//	System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//      boolean noneMatch = allBooks.stream().noneMatch(b->b.getAuthors().size()>1);
//	        
//	       System.out.println(noneMatch);
	        
		// We want one of the books written by more than one author. (findAny)
		
	    System.out.println("************************");
	       Optional<Book> findAnyOptional = allBooks.stream().filter(b->b.getAuthors().size()>1)
	  	        .findAny();
	        
	      System.out.println(findAnyOptional.orElseThrow(()-> new RuntimeException()));
		// We want the total number of pages published.

	
		// We want to know how many pages the longest book has.

	
		// We want the average number of pages of the books
	
		// We want all the titles of the books

	
		// We want the book with the higher number of authors?

	
		// We want a Map of book per year.

		

		// We want to count how many books are published per year.

	

	}

	private static List<Book> loadAllBooks() {
		List<Book> books = new ArrayList<Book>();
		List<Author> authors1 = Arrays.asList(new Author("raj", "gupta", "in"),
				new Author("ekta", "gupta", "in"));

		List<Author> authors2 = Arrays.asList(new Author("raj", "gupta", "in"),new Author("ekta", "gupta", "in"));

		List<Author> authors3 = Arrays.asList(new Author("gunika", "gupta", "us"),
				new Author("keshav", "gupta", "us"));
		//Book book=new Book(null, authors3, 0, null, 0, null)
		books.add(new Book("java", authors1, 400, Subject.JAVA, 2000, "1213"));
		books.add(new Book("python", authors2, 379, Subject.JAVA, 2007, "1218"));
		books.add(new Book("basics of c#", authors3, 600, Subject.DOT_NET, 2000, "1293"));

		return books;
	}

}
